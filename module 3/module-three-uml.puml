
@startuml GameFactory

abstract class GameFactory {
    + __init__()
    + createPlayer()
    + createBoard()
    + createAlgorithm()
    + createGameLogic()
}

class TicTacToeFactory {
    + __init__()
    + createPlayer()
    + createBoard()
    + createAlgorithm()
    + createGameLogic()
}

class ChessFactory {
    + __init__()
    + createPlayer()
    + createBoard()
    + createAlgorithm()
    + createGameLogic()
}

class BackgammonFactory {
+ __init__()
    + createPlayer()
    + createBoard()
    + createAlgorithm()
    + createGameLogic()
}

abstract class Algorithm  {
    - boardGame: Board
    + __init__(boardGame: Board)
    + bestMove(boardGame: Board): int

}

class Minimax  {
    - boardGame: Board
    + __init__(boardGame: Board)
    + bestMove(boardGame: Board): int
}

class ReinforcementLearning  {
    - boardGame: Board
    + __init__(boardGame: Board)
    + bestMove(boardGame: Board): int
}


abstract class Board {
    - dimensions: int
    + __init__(dimensions: int)
    + createBoard() void
    + printBoard() void
    + setCellState(position: int, state: String) void
    + getCellState(position: int): String
    + getBoardState(): dictionary
    + getBoardDimensions(): int
    + spaceIsFree(position: int): boolean
}


class TicTacToeBoard {
    - dimensions: int
    + __init__(dimensions: int)
    + createBoard() void
    + printBoard() void
    + setCellState(position: int, state: String) void
    + getCellState(position: int): String
    + getBoardState(): dictionary
    + getBoardDimensions(): int
    + spaceIsFree(position: int): boolean
}

class ChessBoard {
    - dimensions: int
    + __init__(dimensions: int)
    + createBoard() void
    + printBoard() void
    + setCellState(position: int, state: String) void
    + getCellState(position: int): String
    + getBoardState(): dictionary
    + getBoardDimensions(): int
    + spaceIsFree(position: int): boolean
}

class BackgammonBoard {
    - dimensions: int
    + __init__(dimensions: int)
    + createBoard() void
    + printBoard() void
    + setCellState(position: int, state: String) void
    + getCellState(position: int): String
    + getBoardState(): dictionary
    + getBoardDimensions(): int
    + spaceIsFree(position: int): boolean
}

abstract class GameLogic {
    - boardGame: Board
    + __init__(boardGame: Board)
    + chkForWin(): boolean
    + chkForDraw(): boolean
    + chkMarkForWin(letter: String): boolean
}


class TicTacToeGameLogic {
    - boardGame: Board
    + __init__(boardGame: Board)
    + chkForWin(): boolean
    + chkForDraw(): boolean
    + chkMarkForWin(): boolean
}

class ChessGameLogic {
    - boardGame: Board
    + __init__(boardGame: Board)
    + chkForWin(): boolean
    + chkForDraw(): boolean
    + chkMarkForWin(): boolean
}

class BackgammonGameLogic {
    - boardGame: Board
    + __init__(boardGame: Board)
    + chkForWin(): boolean
    + chkForDraw(): boolean
    + chkMarkForWin(): boolean
}

abstract class Player {
    + __init__()
    + makeMove(boardGame: Board, letter: String, position: int): void   
}

class HumanPlayer {
    + __init__()
    + makeMove(boardGame: Board, letter: String, position: int): void
}

class ComputerPlayer {
    + __init__()
    + makeMove(boardGame: Board, letter: String, position: int): void
}


Board <|-- TicTacToeBoard
Board <|-- ChessBoard
Board <|-- BackgammonBoard
GameLogic <|-- TicTacToeGameLogic
GameLogic <|-- ChessGameLogic
GameLogic <|-- BackgammonGameLogic
Algorithm <|-- Minimax
Algorithm <|-- ReinforcementLearning
Player <|-- HumanPlayer
Player <|-- ComputerPlayer
GameFactory <|-- TicTacToeFactory
TicTacToeFactory .. TicTacToeBoard
TicTacToeFactory .. TicTacToeGameLogic
TicTacToeFactory .. Minimax
TicTacToeFactory .. ReinforcementLearning
TicTacToeFactory .. HumanPlayer
TicTacToeFactory .. ComputerPlayer
GameFactory <|-- ChessFactory
GameFactory <|-- BackgammonFactory
@enduml
